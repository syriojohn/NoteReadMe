
1. Create a WCF Price Streaming Service: The WCF service will expose a method that streams price data to the client.
2. Create a WPF Client: The WPF application will connect to the WCF service and display the price data in a DataGrid.
3. Configure Nginx as a Reverse Proxy: Nginx will proxy requests to either the primary WCF service or the DR service, depending on availability.

Step 1: WCF Price Streaming Service

We’ll start by implementing a simple WCF service that streams prices to clients.

1.1 Create a WCF Service Application
1. Create a new WCF Service Application in Visual Studio:
• Go to File > New > Project, select WCF Service Application, and name it WcfPriceService.
2. Define the Price Contract: In the IService1.cs file, define the service contract for streaming price updates.

using System;
using System.ServiceModel;

[ServiceContract]
public interface IPriceService
{
    [OperationContract]
    void GetPriceStream();
}

3. Implement the Price Service: In the Service1.svc.cs file, implement the GetPriceStream method. We will simulate price streaming using a Task.Delay to update the price every few seconds.

using System;
using System.ServiceModel;
using System.Threading.Tasks;

public class PriceService : IPriceService
{
    public async void GetPriceStream()
    {
        Random random = new Random();
       
        // Simulate streaming prices every 2 seconds
        while (true)
        {
            var price = new Price
            {
                ISIN = "US1234567890",
                BidPrice = (decimal)(random.NextDouble() * 100),
                AskPrice = (decimal)(random.NextDouble() * 100)
            };

            // Simulate streaming the price (send to the client, here it's just logging)
            Console.WriteLine($"Price update: {price.ISIN} | Bid: {price.BidPrice} | Ask: {price.AskPrice}");

            await Task.Delay(2000);  // Simulate a 2-second delay between updates
        }
    }
}

public class Price
{
    public string ISIN { get; set; }
    public decimal BidPrice { get; set; }
    public decimal AskPrice { get; set; }
}

4. Configure the Service: Ensure the WCF service is properly configured in web.config. The binding can be basicHttpBinding for simplicity.

<system.serviceModel>
    <bindings>
        <basicHttpBinding>
            <binding name="BasicHttpBinding_IPriceService" />
        </basicHttpBinding>
    </bindings>
    <services>
        <service name="WcfPriceService.PriceService">
            <endpoint address="" binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_IPriceService" contract="WcfPriceService.IPriceService" />
            <host>
                <baseAddresses>
                    <add baseAddress="http://localhost:8080/PriceService" />
                </baseAddresses>
            </host>
        </service>
    </services>
</system.serviceModel>

1.2 Run the WCF Price Service

Run the WCF service on http://localhost:8080/PriceService.

Step 2: WPF Client to Connect to WCF Service

Next, let’s implement the WPF client that will connect to the WCF price service and display the prices in a DataGrid.

2.1 WPF Application Setup
1. Create a new WPF Application in Visual Studio.
2. Add Service Reference:
• Right-click on the WPF project > Add > Service Reference.
• Enter the WCF service URL: http://localhost:8080/PriceService.
• Name the service reference PriceServiceReference.

2.2 Update MainWindow.xaml

<Window x:Class="WpfPriceStream.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="WPF Price Stream" Height="450" Width="800">
    <Grid>
        <DataGrid Name="PriceDataGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" AutoGenerateColumns="True"/>
    </Grid>
</Window>

2.3 Update MainWindow.xaml.cs
1. Connect to the WCF Service: We’ll use the IPriceService interface generated by the service reference to connect to the WCF service.

using System;
using System.Collections.ObjectModel;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Windows;
using WpfPriceStream.PriceServiceReference;

namespace WpfPriceStream
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<Price> _prices = new ObservableCollection<Price>();
        private PriceServiceClient _client;

        public MainWindow()
        {
            InitializeComponent();
            PriceDataGrid.ItemsSource = _prices;

            // Initialize WCF client
            _client = new PriceServiceClient();

            // Subscribe to the streaming service
            StartPriceStream();
        }

        private async void StartPriceStream()
        {
            // Simulate price stream by calling the WCF service (in a real app, this would be async streaming)
            await Task.Run(() =>
            {
                _client.GetPriceStream();
                _client.Close();
            });
        }

        private void OnPriceUpdate(Price price)
        {
            // Update the UI with the latest price
            _prices.Add(price);
            if (_prices.Count > 50) // Keep last 50 prices
            {
                _prices.RemoveAt(0);
            }
        }
    }
}

Step 3: Set Up Nginx for Reverse Proxy

We will configure Nginx to act as a reverse proxy to route requests to either the primary WCF service or the DR WCF service in case the primary service fails.

3.1 Install Nginx on Windows
1. Download Nginx from nginx.org for Windows.
2. Extract the Nginx zip file and place it in a folder (e.g., C:\nginx).

3.2 Configure Nginx Reverse Proxy

Edit the nginx.conf file (located in C:\nginx\conf) to route requests to your primary and DR WCF services.

http {
    upstream wcf_price_backend {
        # Primary WCF Price Service
        server primary-price-service:8080 fail_timeout=30s max_fails=3;

        # DR WCF Price Service (backup)
        server dr-price-service:8080 backup;
    }

    server {
        listen 80;
        server_name yourdomain.com;

        location /PriceService {
            proxy_pass http://wcf_price_backend;  # Forward requests to the WCF price service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Optional: Adjust timeouts for WCF services
        proxy_read_timeout 600s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
    }
}

3.3 Start Nginx
1. Open Command Prompt and navigate to the Nginx directory:

cd C:\nginx


2. Start Nginx:

start nginx



Step 4: Test Failover with Nginx
• Primary WCF Service: Make sure your primary service is running on http://primary-price-service:8080/PriceService.
• DR WCF Service: Similarly, ensure the DR service is running on http://dr-price-service:8080/PriceService.
• Nginx: Make sure Nginx is running and configured correctly.

Step 5: WPF Client Testing
1. Start the Primary Price Service: Run the WCF service (localhost:8080/PriceService).
2. Start the WPF Application: The WPF application will connect to the service through the Nginx reverse proxy.
3. Simulate Failover: Stop the primary price service. Nginx should now automatically route requests to the DR service.
4. Restart Primary Service: Once the primary service comes back online, Nginx will resume routing requests to it.

Summary
• WCF Price Service: Simulates a price streaming service that sends updates.
• WPF Client: A simple WPF application that connects to the WCF service and displays prices in a DataGrid.
• Nginx Reverse Proxy: Configured to route requests to either the primary WCF service or the DR service based on availability. Nginx handles